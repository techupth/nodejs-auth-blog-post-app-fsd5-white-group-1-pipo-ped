import { Router } from "express";
import { db } from "../utils/db.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

const authRouter = Router();

// üê® Todo: Exercise #1
// ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ Register ‡∏ï‡∏±‡∏ß User ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Database ‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
authRouter.post("/register", async (req, res) => {
  const user = {
    username: req.body.username,
    password: req.body.password,
    firstName: req.body.firstName,
    lastName: req.body.lastName,
  };
  //‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ Password ‡∏Ç‡∏≠‡∏á User ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ Save ‡∏•‡∏á Database ‡∏î‡πâ‡∏ß‡∏¢ Package bcrypt
  const salt = await bcrypt.genSalt(10);
  user.password = await bcrypt.hash(user.password, salt);

  const collection = db.collection("users");
  await collection.insertOne(user);
  return res.json({ message: "User has been created successfully" });
});

// üê® Todo: Exercise #3
// ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ Login ‡∏ï‡∏±‡∏ß User ‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ

authRouter.post("/login", async (req, res) => {
  //‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Credentials
  const user = await db
    .collection("users")
    .findOne({ username: req.body.username });
  if (!user) {
    return res.status(404).json({ message: "User not found" });
  }

  //‡∏™‡∏£‡πâ‡∏≤‡∏á Conditional Logic ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Password ‡πÉ‡∏ô Database ‡∏Å‡∏±‡∏ö Password ‡∏ó‡∏µ‡πà Client ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Function bcrypt.compare
  const isValidPassword = await bcrypt.compare(
    req.body.password,
    user.password
  );
  if (!isValidPassword) {
    return res.status(401).json({ message: "Password not valid" });
  }

  //Username ‡πÅ‡∏•‡∏∞ Password ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ Function jwt.sign ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Token
  //1----{ id: user._id, firstName: user.firstName, lastName: user.lastName }
  //2---- secret key
  //3---- Obtion object (expired time)
  const token = jwt.sign(
    { id: user._id, firstName: user.firstName, lastName: user.lastName },
    process.env.SECRET_KEY,
    { expiresIn: "9000" }
  );

  return res.json({ message: "login successfully", token: token });
});

export default authRouter;
